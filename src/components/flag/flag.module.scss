@use "flags";

$animation-duration: 500ms;
$animation-delay: 100ms;
$wave-height: 3%;

/// Adds column gradients to a specified flag.
@mixin flag($name, $palette) {
  &.#{$name} {
    @if length($palette) == 1 {
      .column {
        background: nth($palette, 1);
      }
    } @else if length($palette) == 18 {
      @for $i from 0 to length($palette) {
        .column {
          &:nth-of-type(#{$i + 1}) {
            background: nth($palette, $i + 1);
          }
        }
      }
    } @else {
      @error "$columns must be either 1 or 18 gradients";
    }
  }
}

.flag {
  display: flex;
  aspect-ratio: 3 / 2;

  @include flag("progress-pride", flags.$progress-pride);

  @include flag("trans", flags.$trans);

  @include flag("lesbian", flags.$lesbian);
}

.column {
  flex: 1;

  @media (prefers-reduced-motion: no-preference) {
    animation: oscillate $animation-duration infinite;
    animation-direction: alternate;
    animation-timing-function: ease-in-out;
    animation-fill-mode: backwards;

    @for $i from 0 to 18 {
      &:nth-of-type(#{$i + 1}) {
        animation-delay: -1 * (17 - $i) * $animation-delay;
      }
    }
  }
}

@keyframes oscillate {
  from {
    transform: translateY($wave-height);
  }

  to {
    transform: translateY(-$wave-height);
  }
}
